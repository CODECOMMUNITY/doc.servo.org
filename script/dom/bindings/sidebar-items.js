initSidebarItems({"mod":[["callback","Base classes to work with IDL callbacks."],["cell","A shareable mutable container for the DOM."],["codegen","Generated JS-Rust bindings."],["conversions","Conversions of Rust values to and from `JSVal`."],["error","Utilities to throw exceptions from Rust bindings."],["global","Abstractions for global scopes."],["inheritance","The `Castable` trait."],["interface","Machinery to initialise interface prototype objects and interface objects."],["js","Smart pointers for the JS-managed DOM objects."],["num","The `Finite<T>` struct."],["proxyhandler","Utilities for the implementation of JSAPI proxy handlers."],["refcounted","A generic, safe mechanism by which DOM objects can be pinned and transferred between threads (or intra-thread for asynchronous events). Akin to Gecko's nsMainThreadPtrHandle, this uses thread-safe reference counting and ensures that the actual SpiderMonkey GC integration occurs on the script thread via message passing. Ownership of a `Trusted<T>` object means the DOM object of type T to which it points remains alive. Any other behaviour is undefined. To guarantee the lifetime of a DOM object when performing asynchronous operations, obtain a `Trusted<T>` from that object and pass it along with each operation. A usable pointer to the original DOM object can be obtained on the script thread from a `Trusted<T>` via the `to_temporary` method."],["reflector","The `Reflector` struct."],["str","The `ByteString` struct."],["structuredclone","This module implements structured cloning, as defined by HTML."],["trace","Utilities for tracing JS-managed values."],["utils","Various utilities to glue JavaScript and the DOM implementation together."],["weakref","Weak-referenceable JS-managed DOM objects."],["xmlname","Functions for validating and extracting qualified XML names."]]});