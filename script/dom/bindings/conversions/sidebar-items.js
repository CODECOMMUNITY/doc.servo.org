initSidebarItems({"constant":[["DOM_OBJECT_SLOT","The index of the slot wherein a pointer to the reflected DOM object is stored for non-proxy bindings."]],"enum":[["ConversionBehavior","Behavior for converting out-of-range integers."],["StringificationBehavior","Behavior for stringification of `JSVal`s."]],"fn":[["array_buffer_view_data","Returns a mutable slice of the Array Buffer View data, viewed as T, without checking the real type of it."],["array_buffer_view_data_checked","Returns a mutable slice of the Array Buffer View data, viewed as T, checking that the real type of it is ty."],["array_buffer_view_to_vec","Returns a copy of the ArrayBufferView data, viewed as T, without checking the real type of it."],["array_buffer_view_to_vec_checked","Returns a copy of the ArrayBufferView data, viewed as T, checking that the real type of it is ty."],["get_dom_class","Get the `DOMClass` from `obj`, or `Err(())` if `obj` is not a DOM object."],["is_array_like","Returns whether `value` is an array-like object. Note: Currently only Arrays are supported. TODO: Expand this to support sequences and other array-like objects"],["is_dom_class","Returns whether the given `clasp` is one for a DOM object."],["is_dom_proxy","Returns whether `obj` is a DOM object implemented as a proxy."],["jsid_to_str","Convert the given `jsid` to a `DOMString`. Fails if the `jsid` is not a string, or if the string does not contain valid UTF-16."],["jsstring_to_str","Convert the given `JSString` to a `DOMString`. Fails if the string does not contain valid UTF-16."],["native_from_handlevalue","Get a `*const T` for a DOM object accessible from a `HandleValue`. Caller is responsible for throwing a JS exception if needed in case of error."],["native_from_object","Get a `*const T` for a DOM object accessible from a `JSObject`."],["private_from_object","Get the private pointer of a DOM object from a given reflector."],["private_from_proto_check","Get a `*const libc::c_void` for the given DOM object, unwrapping any wrapper around it first, and checking if the object is of the correct type."],["root_from_handleobject","Get a `Root<T>` for a DOM object accessible from a `HandleObject`."],["root_from_handlevalue","Get a `Root<T>` for a DOM object accessible from a `HandleValue`. Caller is responsible for throwing a JS exception if needed in case of error."],["root_from_object","Get a `Root<T>` for the given DOM object, unwrapping any wrapper around it first, and checking if the object is of the correct type."]],"trait":[["ArrayBufferViewContents","A JS ArrayBufferView contents can only be viewed as the types marked with this trait"],["DerivedFrom","A trait to mark an IDL interface as deriving from another one."],["FromJSValConvertible","A trait to convert `JSVal`s to Rust types."],["IDLInterface","A trait to check whether a given `JSObject` implements an IDL interface."],["ToJSValConvertible","A trait to convert Rust types to `JSVal`s."]]});