initSidebarItems({"constant":[["DECODE_TABLE","Base64 decoding lookup table, generated using: ```rust     let mut ch = 0u8;     loop {         let code = match ch {             b'A'...b'Z' => ch - 0x41,             b'a'...b'z' => ch - 0x47,             b'0'...b'9' => ch + 0x04,             b'+' | b'-' => 0x3E,             b'/' | b'_' => 0x3F,             b'=' => 0xFE,             b'\\r' | b'\\n' => 0xFD,             _ => 0xFF,         };         print!(\"0x{:02X}, \", code);         if ch % 16  == 15 { println!(\"\"); }         else if ch == 0xFF { break; }         ch += 1;     }     println!(\"\"); } ```"],["EQUALS_CODE",""],["INVALID_CODE",""],["NEWLINE_CODE",""],["SPECIAL_CODES_START",""]],"enum":[["CharacterSet","Available encoding character sets"],["FromBase64Error","Errors that can occur when decoding a base64 encoded string"],["Newline","Available newline types"]],"static":[["MIME","Configuration for RFC 2045 MIME base64 encoding"],["STANDARD","Configuration for RFC 4648 standard base64 encoding"],["STANDARD_CHARS",""],["URLSAFE_CHARS",""],["URL_SAFE","Configuration for RFC 4648 base64url encoding"]],"struct":[["Config","Contains configuration parameters for `to_base64`."]],"trait":[["FromBase64","A trait for converting from base64 encoded values."],["ToBase64","A trait for converting a value to base64 encoding."]]});