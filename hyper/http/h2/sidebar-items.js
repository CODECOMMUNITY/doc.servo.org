initSidebarItems({"enum":[["MessageState","The enum tracks the state of the `Http2Message`."]],"fn":[["new_protocol","A convenience method that creates a default `Http2Protocol` that uses a `net::HttpConnector` (which produces an `HttpStream` for the underlying transport layer)."],["parse_headers","Parses a set of HTTP/2 headers into a `hyper::header::Headers` struct."],["parse_response","Parses the response, as returned by `solicit`, into a `ResponseHead` and the full response body."],["prepare_body","A helper function that prepares the body for sending in an HTTP/2 request."],["prepare_headers","A helper function that prepares the headers that should be sent in an HTTP/2 message."]],"struct":[["Http2ConnectError",""],["Http2Connector","A helper struct that implements the `HttpConnect` trait from the `solicit` crate."],["Http2Message","An implementation of the `HttpMessage` trait for HTTP/2."],["Http2Protocol","The `Protocol` implementation that provides HTTP/2 messages (i.e. `Http2Message`)."],["Http2Request","Represents an HTTP/2 request, described by a `RequestHead` and the body of the request. A convenience struct only in use by the `Http2Message`."],["Http2Response","Represents an HTTP/2 response. A convenience struct only in use by the `Http2Message`."],["Http2Stream","A newtype wrapping any `CloneableStream` in order to provide an implementation of a `TransportSream` trait for all types that are a `CloneableStream`."]],"trait":[["CloneableStream","A trait alias representing all types that are both `NetworkStream` and `Clone`."]]});