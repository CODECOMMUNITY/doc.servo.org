initSidebarItems({"constant":[["ZERO_BIG_DIGIT",""]],"enum":[["ParseBigIntError",""],["Sign","A Sign is a `BigInt`'s composing element."]],"fn":[["__add2",""],["adc",""],["add2","/Two argument addition of raw slices: a += b"],["biguint_shl",""],["biguint_shr",""],["cmp_slice",""],["div_rem_digit",""],["div_wide","Divide a two digit numerator by a one digit divisor, returns quotient and remainder:"],["from_bitwise_digits_le",""],["from_inexact_bitwise_digits_le",""],["from_radix_digits_be",""],["get_radix_base","Returns the greatest power of the radix <= big_digit::BASE"],["mac3","Three argument multiply accumulate: acc += b * c"],["mac_digit","Three argument multiply accumulate: acc += b * c"],["mac_with_carry",""],["mul3",""],["sbb",""],["sub2",""],["sub_sign",""],["to_bitwise_digits_le",""],["to_inexact_bitwise_digits_le",""],["to_radix_digits_le",""],["to_str_radix_reversed",""]],"mod":[["big_digit",""]],"struct":[["BigInt","A big signed integer type."],["BigUint","A big unsigned integer type."]],"trait":[["RandBigInt",""],["ToBigInt","A generic trait for converting a value to a `BigInt`."],["ToBigUint","A generic trait for converting a value to a `BigUint`."]],"type":[["BigDigit","A `BigDigit` is a `BigUint`'s composing element."],["DoubleBigDigit","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`."]]});